version: "3.7"

services:
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    volumes:
      - "./futurity/postgres:/var/lib/postgresql/data"
    env_file:
      - prod.env
  nginx:
    build:
      context: ./futurity-ui
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./certbot/www:/var/www/certbot/"
      - "./certbot/conf/:/etc/nginx/ssl/"
    depends_on:
      - api-gateway
    env_file:
      - prod.env
  user-service:
    build:
      context: ./user-service
    container_name: user-service
    depends_on:
      - postgres
      - rabbit
    volumes:
      - "./maven-rep:/root/.m2"
    env_file:
      - prod.env
  project-service:
    build:
      context: ./project-service
    container_name: project-service
    depends_on:
      - postgres
      - rabbit
    volumes:
      - "./maven-rep:/root/.m2"
    env_file:
      - prod.env
  notification-service:
    build:
      context: ./notification-service
    container_name: notification-service
    depends_on:
      - postgres
      - rabbit
    env_file:
      - prod.env
  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service
    depends_on:
      - postgres
    volumes:
      - "./maven-rep:/root/.m2"
      - "./keys:/secrets/"
    env_file:
      - prod.env
  api-gateway:
    build:
      context: ./api-gateway-service
    container_name: api-gateway
    depends_on:
      - postgres
    volumes:
      - "./maven-rep:/root/.m2"
      - "./keys:/secrets/"
    env_file:
      - prod.env
  futurity-telegram-bot:
    build:
      context: ./futurity-telegram-bot
    container_name: futurity-telegram-bot
    depends_on:
      - postgres
      - rabbit
    env_file:
      - prod.env
  rabbit:
    image: rabbitmq:3.12-management
    container_name: rabbit
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "./rabbitmq.config:/etc/rabbitmq/rabbitmq.config"
      - "./definitions.json:/etc/rabbitmq/definitions.json"
      - "./futurity/rabbit:/var/lib/rabbitmq"

  # enable this when you need to generate new certificate:
  # docker compose run --rm  certbot certonly --webroot --webroot-path /var/www/certbot/ -d example.org
  # certbot:
  #  image: certbot/certbot
  #  volumes:
  #    - ./certbot/www/:/var/www/certbot/
  #    - ./certbot/conf/:/etc/letsencrypt/

networks:
  default:
    name: futurity